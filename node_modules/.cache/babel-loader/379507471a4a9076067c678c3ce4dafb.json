{"ast":null,"code":"var _jsxFileName = \"/Users/marwa/frontend/trivia/trivia-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Question from \"./components/Question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 3;\n\nfunction App() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [userAnswers, setUserAnswers] = useState(0);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [questionNumber, setquestionNumber] = useState(0);\n\n  const start = async () => {\n    setGameOver(false); //may you add useEffect\n\n    setLoading(true);\n    await fetch(\"questions.json\").then(response => response.json()).then(Questions => {\n      setQuestions(Questions);\n    });\n    setLoading(false);\n    setScore(0);\n    setUserAnswers(0);\n    setquestionNumber(0);\n  };\n\n  console.log(questions[0].question);\n\n  const nextQuestion = () => {\n    const nextQuestion = questionNumber + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setquestionNumber(nextQuestion);\n    }\n  };\n\n  const checkAnswer = e => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[questionNumber].correct === answer;\n      if (correct) setScore(score + 1);\n      setUserAnswers(prev => prev + 1); //useranswers??\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trivia\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to Trivia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), gameOver || userAnswers === TOTAL_QUESTIONS ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start\",\n        onClick: start,\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this) : null, !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"score\",\n        children: [\"Score: \", score, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 22\n      }, this) : null, loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading Questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this), !loading && !gameOver && /*#__PURE__*/_jsxDEV(Question, {\n        questionNum: questionNumber + 1,\n        totalQuestions: TOTAL_QUESTIONS,\n        question: questions[questionNumber].question,\n        callback: checkAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"eoxZgOvMc+htk1RvQGbgjdzfhfM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/marwa/frontend/trivia/trivia-app/src/App.tsx"],"names":["React","useState","Question","TOTAL_QUESTIONS","App","loading","setLoading","questions","setQuestions","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","questionNumber","setquestionNumber","start","fetch","then","response","json","Questions","console","log","question","nextQuestion","checkAnswer","e","answer","currentTarget","value","correct","prev"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { IQuestion } from \"./models/IQuestion\";\nimport Question from \"./components/Question\";\nimport { async } from \"q\";\n\nconst TOTAL_QUESTIONS = 3;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<Array<IQuestion>>([]);\n  const [userAnswers, setUserAnswers] = useState(0);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [questionNumber, setquestionNumber] = useState(0);\n\n\n  const start = async () => {\n    setGameOver(false);\n\n    //may you add useEffect\n    setLoading(true);\n    await fetch(\"questions.json\")\n      .then((response) => response.json())\n      .then((Questions) => {\n        setQuestions(Questions);\n      });\n\n    setLoading(false);\n    setScore(0);\n    setUserAnswers(0);\n    setquestionNumber(0);\n  };\n \n  console.log(questions[0].question);\n  const nextQuestion = () => {\n    const nextQuestion = questionNumber + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setquestionNumber(nextQuestion);\n    }\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[questionNumber].correct === answer;\n      if (correct) setScore(score + 1);\n      setUserAnswers((prev) => prev + 1);\n      //useranswers??\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"trivia\">\n        <h1>Welcome to Trivia</h1>\n\n        {gameOver || userAnswers === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={start}>\n            Start Game\n          </button>\n        ) : null}\n\n        {!gameOver ? <p className=\"score\">Score: {score} </p> : null}\n\n        {loading && <p>Loading Questions...</p>}\n\n        {!loading && !gameOver && (\n          <Question\n            questionNum={questionNumber + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[questionNumber].question}\n            callback={checkAnswer}\n          />\n        )}\n\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}