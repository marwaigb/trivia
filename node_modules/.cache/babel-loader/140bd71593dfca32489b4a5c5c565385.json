{"ast":null,"code":"var _jsxFileName = \"/Users/marwa/frontend/trivia/trivia-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Question from \"./components/Question\";\nimport { useAppDispatch, useAppSelector } from './store/hooks';\nimport { changeIndex, resetUserAnswer } from \"./store/triviaSlice\";\nimport Start from \"./components/Start\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 5;\n\nfunction App() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const questionNumber = useAppSelector(state => state.trivia.index);\n  const questions = useAppSelector(state => state.trivia.items);\n  const userAnswers = useAppSelector(state => state.trivia.userAnwers);\n  const dispatch = useAppDispatch(); // const emptyAnswer = {\n  //   question: '',\n  //   answer: '',\n  //   correct: false,\n  //   correctAnswer: ''\n  // };\n\n  const start = async () => {\n    setGameOver(false);\n    setLoading(true);\n    setLoading(false);\n    setScore(0);\n    dispatch(resetUserAnswer());\n    dispatch(changeIndex(0));\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = questionNumber + 1;\n    dispatch(changeIndex(nextQuestion));\n  };\n\n  const prevQuestion = () => {\n    const prevQuestion = questionNumber - 1;\n    dispatch(changeIndex(prevQuestion));\n  };\n\n  const checkAnswer = e => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[questionNumber].correct === answer; // const answerObject = {\n      //   question: questions[questionNumber].question,\n      //   answer,\n      //   correct,\n      //   correctAnswer: questions[questionNumber].correct,\n      // };\n      //**dispatch(addUserAnswer());\n\n      console.log(userAnswers);\n    }\n  };\n\n  const endGame = () => {\n    setGameOver(true);\n    let newScore = 0;\n    userAnswers.forEach(element => {\n      if (element.answer === element.correctAnswer) {\n        newScore++;\n      }\n    });\n    setScore(newScore);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trivia\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to Trivia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), gameOver ? /*#__PURE__*/_jsxDEV(Start, {\n        startGame: start,\n        Score: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this) : null, loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading Questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), !loading && !gameOver && /*#__PURE__*/_jsxDEV(Question, {\n        questionNum: questionNumber + 1,\n        totalQuestions: TOTAL_QUESTIONS,\n        question: questions[questionNumber].question,\n        callback: checkAnswer,\n        answers: questions[questionNumber].answers,\n        userAnswer: userAnswers ? userAnswers[questionNumber] : undefined,\n        correctAns: questions[questionNumber].correct\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), !gameOver && !loading && questionNumber !== 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"prev\",\n        onClick: prevQuestion,\n        children: \"Previous Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this) : null, !gameOver && !loading && questionNumber !== TOTAL_QUESTIONS - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next\",\n        onClick: nextQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this) : null, !gameOver && !loading && userAnswers.length === questionNumber + 1 && questionNumber === TOTAL_QUESTIONS - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"end\",\n        onClick: endGame,\n        children: \"End\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 10\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"V8fexE2ujIYtjTn9dgYkUu0SqWk=\", false, function () {\n  return [useAppSelector, useAppSelector, useAppSelector, useAppDispatch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/marwa/frontend/trivia/trivia-app/src/App.tsx"],"names":["React","useState","Question","useAppDispatch","useAppSelector","changeIndex","resetUserAnswer","Start","TOTAL_QUESTIONS","App","loading","setLoading","score","setScore","gameOver","setGameOver","questionNumber","state","trivia","index","questions","items","userAnswers","userAnwers","dispatch","start","nextQuestion","prevQuestion","checkAnswer","e","answer","currentTarget","value","correct","console","log","endGame","newScore","forEach","element","correctAnswer","question","answers","undefined","length"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { IQuestion } from \"./models/IQuestion\";\nimport Question from \"./components/Question\";\nimport { useAppDispatch, useAppSelector } from './store/hooks';\nimport { AnswerObject } from \"./models/AnswerObject\";\nimport { addUserAnswer, changeIndex ,resetUserAnswer} from \"./store/triviaSlice\";\nimport Buttons from \"./components/Buttuons\";\nimport Start from \"./components/Start\";\nconst TOTAL_QUESTIONS = 5;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const questionNumber = useAppSelector((state) => state.trivia.index);\n  const questions = useAppSelector((state) => state.trivia.items);\n  const userAnswers = useAppSelector((state) => state.trivia.userAnwers);\n  const dispatch = useAppDispatch();\n\n  // const emptyAnswer = {\n  //   question: '',\n  //   answer: '',\n  //   correct: false,\n  //   correctAnswer: ''\n  // };\n\n  const start = async () => {\n    setGameOver(false);\n    setLoading(true);\n    setLoading(false);\n    setScore(0);\n    dispatch(resetUserAnswer());\n    dispatch(changeIndex(0));\n\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = questionNumber + 1;\n      dispatch(changeIndex(nextQuestion));\n\n  };\n\n  const prevQuestion = () => {\n    const prevQuestion = questionNumber - 1;\n    dispatch(changeIndex(prevQuestion));\n\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[questionNumber].correct === answer;\n      // const answerObject = {\n      //   question: questions[questionNumber].question,\n      //   answer,\n      //   correct,\n      //   correctAnswer: questions[questionNumber].correct,\n      // };\n      //**dispatch(addUserAnswer());\n      console.log(userAnswers);\n    }\n  };\n\n  const endGame = () => {\n    setGameOver(true);\n    let newScore = 0;\n    userAnswers.forEach(element => {\n      if(element.answer === element.correctAnswer){\n        newScore++;\n      }\n    });\n    setScore(newScore);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"trivia\">\n        <h1>Welcome to Trivia</h1>\n\n        {gameOver  ? (\n          <Start\n          startGame={start}\n          Score={score}/>\n        ) : null}\n\n        {loading && <p>Loading Questions...</p>}\n\n        {!loading && !gameOver && (\n          <Question\n            questionNum={questionNumber + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[questionNumber].question}\n            callback={checkAnswer}\n            answers = {questions[questionNumber].answers}\n            userAnswer={userAnswers ? userAnswers[questionNumber] : undefined}\n            correctAns={questions[questionNumber].correct}\n          />\n        )}\n\n      {!gameOver &&\n        !loading &&\n        questionNumber !== 0 ? (\n        \n            <button className=\"prev\" onClick={prevQuestion}>\n              Previous Question\n            </button>\n\n        ) : null}\n\n        {!gameOver &&\n        !loading &&\n        questionNumber !== TOTAL_QUESTIONS - 1 ? (\n            <button className=\"next\" onClick={nextQuestion}>\n              Next Question\n            </button>\n        ) : null}\n\n      {!gameOver &&\n        !loading &&\n        userAnswers.length === questionNumber + 1 &&\n        questionNumber === TOTAL_QUESTIONS - 1 ? (\n         <button className=\"end\" onClick={endGame}>\n         End \n        </button>\n        ) : null}\n\n\n      \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n"]},"metadata":{},"sourceType":"module"}