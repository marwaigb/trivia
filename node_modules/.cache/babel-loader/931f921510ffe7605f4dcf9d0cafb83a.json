{"ast":null,"code":"var _jsxFileName = \"/Users/marwa/frontend/trivia/trivia-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Question from \"./components/Question\";\nimport { useAppDispatch, useAppSelector } from './store/hooks';\nimport { addUserAnswer, changeIndex, resetUserAnswer } from \"./store/triviaSlice\";\nimport Start from \"./components/Start\";\n/** @jsxImportSource @emotion/react */\n\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 5;\n\nfunction App() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const questionNumber = useAppSelector(state => state.trivia.index);\n  const questions = useAppSelector(state => state.trivia.items);\n  const userAnswers = useAppSelector(state => state.trivia.userAnwers);\n  const dispatch = useAppDispatch();\n  const emptyAnswer = {\n    question: '',\n    answer: '',\n    correct: false,\n    correctAnswer: ''\n  };\n\n  const start = async () => {\n    setGameOver(false);\n    setLoading(true);\n    setLoading(false);\n    setScore(0);\n    dispatch(resetUserAnswer(emptyAnswer));\n    dispatch(changeIndex(0));\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = questionNumber + 1;\n    dispatch(changeIndex(nextQuestion));\n  };\n\n  const prevQuestion = () => {\n    const prevQuestion = questionNumber - 1;\n    dispatch(changeIndex(prevQuestion));\n  };\n\n  const checkAnswer = e => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[questionNumber].correct === answer;\n      const answerObject = {\n        question: questions[questionNumber].question,\n        answer,\n        correct,\n        correctAnswer: questions[questionNumber].correct\n      };\n      dispatch(addUserAnswer(answerObject));\n      console.log(userAnswers);\n    }\n  };\n\n  const endGame = () => {\n    setGameOver(true);\n    let newScore = 0;\n    userAnswers.forEach(element => {\n      if (element.answer === element.correctAnswer) {\n        newScore++;\n      }\n    });\n    setScore(newScore);\n  };\n\n  return _jsxDEV(\"div\", {\n    className: \"App\",\n    children: _jsxDEV(\"div\", {\n      className: \"trivia\",\n      children: [_jsxDEV(\"h1\", {\n        children: \"Welcome to Trivia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), gameOver ? _jsxDEV(Start, {\n        startGame: start,\n        Score: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this) : null, loading && _jsxDEV(\"p\", {\n        children: \"Loading Questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this), !loading && !gameOver && _jsxDEV(Question, {\n        questionNum: questionNumber + 1,\n        totalQuestions: TOTAL_QUESTIONS,\n        question: questions[questionNumber].question,\n        callback: checkAnswer,\n        answer_1: questions[questionNumber].answer1,\n        answer_2: questions[questionNumber].answer2,\n        answer_3: questions[questionNumber].answer3,\n        answer_4: questions[questionNumber].answer4,\n        userAnswer: userAnswers ? userAnswers[questionNumber] : undefined,\n        correctAns: questions[questionNumber].correct\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), !gameOver && !loading && questionNumber !== 0 ? _jsxDEV(\"button\", {\n        className: \"prev\",\n        onClick: prevQuestion,\n        children: \"Previous Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this) : null, !gameOver && !loading && questionNumber !== TOTAL_QUESTIONS - 1 ? _jsxDEV(\"button\", {\n        className: \"next\",\n        onClick: nextQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this) : null, !gameOver && !loading && userAnswers.length === questionNumber + 1 && questionNumber === TOTAL_QUESTIONS - 1 ? _jsxDEV(\"button\", {\n        className: \"end\",\n        onClick: endGame,\n        children: \"End\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 10\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"V8fexE2ujIYtjTn9dgYkUu0SqWk=\", false, function () {\n  return [useAppSelector, useAppSelector, useAppSelector, useAppDispatch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/marwa/frontend/trivia/trivia-app/src/App.tsx"],"names":["React","useState","Question","useAppDispatch","useAppSelector","addUserAnswer","changeIndex","resetUserAnswer","Start","TOTAL_QUESTIONS","App","loading","setLoading","score","setScore","gameOver","setGameOver","questionNumber","state","trivia","index","questions","items","userAnswers","userAnwers","dispatch","emptyAnswer","question","answer","correct","correctAnswer","start","nextQuestion","prevQuestion","checkAnswer","e","currentTarget","value","answerObject","console","log","endGame","newScore","forEach","element","answer1","answer2","answer3","answer4","undefined","length"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { IQuestion } from \"./models/IQuestion\";\nimport Question from \"./components/Question\";\nimport { useAppDispatch, useAppSelector } from './store/hooks';\nimport { AnswerObject } from \"./models/AnswerObject\";\nimport { addUserAnswer, changeIndex ,resetUserAnswer} from \"./store/triviaSlice\";\nimport Buttons from \"./components/Buttuons\";\nimport Start from \"./components/Start\";\n/** @jsxImportSource @emotion/react */\n\nconst TOTAL_QUESTIONS = 5;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const questionNumber = useAppSelector((state) => state.trivia.index);\n  const questions = useAppSelector((state) => state.trivia.items);\n  const userAnswers = useAppSelector((state) => state.trivia.userAnwers);\n  const dispatch = useAppDispatch();\n\n  const emptyAnswer = {\n    question: '',\n    answer: '',\n    correct: false,\n    correctAnswer: ''\n  };\n\n  const start = async () => {\n    setGameOver(false);\n    setLoading(true);\n    setLoading(false);\n    setScore(0);\n    dispatch(resetUserAnswer(emptyAnswer));\n    dispatch(changeIndex(0));\n\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = questionNumber + 1;\n      dispatch(changeIndex(nextQuestion));\n\n  };\n\n  const prevQuestion = () => {\n    const prevQuestion = questionNumber - 1;\n    dispatch(changeIndex(prevQuestion));\n\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[questionNumber].correct === answer;\n      const answerObject = {\n        question: questions[questionNumber].question,\n        answer,\n        correct,\n        correctAnswer: questions[questionNumber].correct,\n      };\n      dispatch(addUserAnswer(answerObject));\n      console.log(userAnswers);\n    }\n  };\n\n  const endGame = () => {\n    setGameOver(true);\n    let newScore = 0;\n    userAnswers.forEach(element => {\n      if(element.answer === element.correctAnswer){\n        newScore++;\n      }\n    });\n    setScore(newScore);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"trivia\">\n        <h1>Welcome to Trivia</h1>\n\n        {gameOver  ? (\n          <Start\n          startGame={start}\n          Score={score}/>\n        ) : null}\n\n        {loading && <p>Loading Questions...</p>}\n\n        {!loading && !gameOver && (\n          <Question\n            questionNum={questionNumber + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[questionNumber].question}\n            callback={checkAnswer}\n            answer_1={questions[questionNumber].answer1}\n            answer_2={questions[questionNumber].answer2}\n            answer_3={questions[questionNumber].answer3}\n            answer_4={questions[questionNumber].answer4}\n            userAnswer={userAnswers ? userAnswers[questionNumber] : undefined}\n            correctAns={questions[questionNumber].correct}\n          />\n        )}\n\n      {!gameOver &&\n        !loading &&\n        questionNumber !== 0 ? (\n        \n            <button className=\"prev\" onClick={prevQuestion}>\n              Previous Question\n            </button>\n\n        ) : null}\n\n        {!gameOver &&\n        !loading &&\n        questionNumber !== TOTAL_QUESTIONS - 1 ? (\n            <button className=\"next\" onClick={nextQuestion}>\n              Next Question\n            </button>\n        ) : null}\n\n      {!gameOver &&\n        !loading &&\n        userAnswers.length === questionNumber + 1 &&\n        questionNumber === TOTAL_QUESTIONS - 1 ? (\n         <button className=\"end\" onClick={endGame}>\n         End \n        </button>\n        ) : null}\n\n\n      \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n"]},"metadata":{},"sourceType":"module"}