{"ast":null,"code":"var _jsxFileName = \"/Users/marwa/frontend/trivia/trivia-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Question from \"./components/Question\";\nimport { useAppDispatch, useAppSelector } from './store/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 5;\n\nfunction App() {\n  _s();\n\n  const [loading, setLoading] = useState(false); //const [questions, setQuestions] = useState<Array<IQuestion>>([]);\n  //const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [questionNumber, setquestionNumber] = useState(0);\n  const questions = useAppSelector(state => state.trivia.items);\n  const userAnswers = useAppSelector(state => state.trivia.userAnwers);\n  const dispatch = useAppDispatch();\n\n  const start = async () => {\n    setGameOver(false);\n    setLoading(true); // await fetch(\"questions.json\")\n    //   .then((response) => response.json())\n    //   .then((Questions) => {\n    //     setQuestions(Questions);\n    //   });\n\n    setLoading(false);\n    setScore(0); //setUserAnswers([]);\n\n    setquestionNumber(0);\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = questionNumber + 1;\n    setquestionNumber(nextQuestion);\n  };\n\n  const prevQuestion = () => {\n    const prevQuestion = questionNumber - 1;\n    setquestionNumber(prevQuestion);\n  };\n\n  const checkAnswer = e => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[questionNumber].correct === answer;\n      const answerObject = {\n        question: questions[questionNumber].question,\n        answer,\n        correct,\n        correctAnswer: questions[questionNumber].correct\n      }; //const answers = [...userAnswers];\n      //answers[questionNumber] = answerObject;\n\n      console.log(answerObject);\n      console.log(\"length is \" + userAnswers.length + \" index \" + questionNumber);\n      userAnswers[questionNumber] = answerObject;\n      console.log(userAnswers); //setUserAnswers(answers);\n    }\n  };\n\n  const endGame = () => {\n    setGameOver(true);\n    let newScore = 0;\n    userAnswers.forEach(element => {\n      if (element.answer === element.correctAnswer) {\n        newScore++;\n      }\n    });\n    setScore(newScore);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trivia\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to Trivia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), gameOver ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"start\",\n          onClick: start,\n          children: \"Start Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"score\",\n          children: [\"Score: \", score, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : null, loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading Questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), !loading && !gameOver && /*#__PURE__*/_jsxDEV(Question, {\n        questionNum: questionNumber + 1,\n        totalQuestions: TOTAL_QUESTIONS,\n        question: questions[questionNumber].question,\n        callback: checkAnswer,\n        answer_1: questions[questionNumber].answer1,\n        answer_2: questions[questionNumber].answer2,\n        answer_3: questions[questionNumber].answer3,\n        answer_4: questions[questionNumber].answer4,\n        userAnswer: userAnswers ? userAnswers[questionNumber] : undefined,\n        correctAns: questions[questionNumber].correct\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), !gameOver && !loading && questionNumber !== 0 && questionNumber !== TOTAL_QUESTIONS - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"prev\",\n        onClick: prevQuestion,\n        children: \"Previous Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this) : null, !gameOver && !loading && questionNumber !== TOTAL_QUESTIONS - 1 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next\",\n          onClick: nextQuestion,\n          children: \"Next Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)\n      }, void 0, false) : null, !gameOver && !loading && userAnswers.length === questionNumber + 1 && questionNumber === TOTAL_QUESTIONS - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"end\",\n        onClick: endGame,\n        children: \"End\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 10\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"1usbe0Y1YX7O1rh1tP86IRwe40c=\", false, function () {\n  return [useAppSelector, useAppSelector, useAppDispatch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/marwa/frontend/trivia/trivia-app/src/App.tsx"],"names":["React","useState","Question","useAppDispatch","useAppSelector","TOTAL_QUESTIONS","App","loading","setLoading","score","setScore","gameOver","setGameOver","questionNumber","setquestionNumber","questions","state","trivia","items","userAnswers","userAnwers","dispatch","start","nextQuestion","prevQuestion","checkAnswer","e","answer","currentTarget","value","correct","answerObject","question","correctAnswer","console","log","length","endGame","newScore","forEach","element","answer1","answer2","answer3","answer4","undefined"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { IQuestion } from \"./models/IQuestion\";\nimport Question from \"./components/Question\";\nimport { useAppDispatch, useAppSelector } from './store/hooks';\nimport { AnswerObject } from \"./models/AnswerObject\";\n\nconst TOTAL_QUESTIONS = 5;\n\n\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  //const [questions, setQuestions] = useState<Array<IQuestion>>([]);\n  //const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [questionNumber, setquestionNumber] = useState(0);\n\n  const questions = useAppSelector((state) => state.trivia.items);\n  const userAnswers = useAppSelector((state) => state.trivia.userAnwers);\n  const dispatch = useAppDispatch();\n\n  const start = async () => {\n    setGameOver(false);\n    setLoading(true);\n    // await fetch(\"questions.json\")\n    //   .then((response) => response.json())\n    //   .then((Questions) => {\n    //     setQuestions(Questions);\n\n    //   });\n    setLoading(false);\n    setScore(0);\n    //setUserAnswers([]);\n    setquestionNumber(0);\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = questionNumber + 1;\n      setquestionNumber(nextQuestion);\n  };\n\n  const prevQuestion = () => {\n    const prevQuestion = questionNumber - 1;\n      setquestionNumber(prevQuestion);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[questionNumber].correct === answer;\n      const answerObject = {\n        question: questions[questionNumber].question,\n        answer,\n        correct,\n        correctAnswer: questions[questionNumber].correct,\n      };\n      //const answers = [...userAnswers];\n      //answers[questionNumber] = answerObject;\n      console.log(answerObject);\n      console.log(\"length is \"+ userAnswers.length + \" index \" + questionNumber);\n      userAnswers[questionNumber] = answerObject;\n      console.log(userAnswers);\n      //setUserAnswers(answers);\n    }\n  };\n\n  const endGame = () => {\n    setGameOver(true);\n    let newScore = 0;\n    userAnswers.forEach(element => {\n      if(element.answer === element.correctAnswer){\n        newScore++;\n      }\n    });\n    setScore(newScore);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"trivia\">\n        <h1>Welcome to Trivia</h1>\n\n\n        {gameOver  ? (\n          <>\n            <button className=\"start\" onClick={start}>\n              Start Game\n            </button>\n            <h3 className=\"score\">Score: {score} </h3>\n          </>\n        ) : null}\n\n        {loading && <p>Loading Questions...</p>}\n\n        {!loading && !gameOver && (\n          <Question\n            questionNum={questionNumber + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[questionNumber].question}\n            callback={checkAnswer}\n            answer_1={questions[questionNumber].answer1}\n            answer_2={questions[questionNumber].answer2}\n            answer_3={questions[questionNumber].answer3}\n            answer_4={questions[questionNumber].answer4}\n            userAnswer={userAnswers ? userAnswers[questionNumber] : undefined}\n            correctAns={questions[questionNumber].correct}\n          />\n        )}\n\n      {!gameOver &&\n        !loading &&\n        questionNumber !== 0 &&\n        questionNumber !== TOTAL_QUESTIONS - 1 ? (\n        \n            <button className=\"prev\" onClick={prevQuestion}>\n              Previous Question\n            </button>\n\n        ) : null}\n\n        {!gameOver &&\n        !loading &&\n        questionNumber !== TOTAL_QUESTIONS - 1 ? (\n          <>\n            <button className=\"next\" onClick={nextQuestion}>\n              Next Question\n            </button>\n          </>\n        ) : null}\n\n      {!gameOver &&\n        !loading &&\n        userAnswers.length === questionNumber + 1 &&\n        questionNumber === TOTAL_QUESTIONS - 1 ? (\n         <button className=\"end\" onClick={endGame}>\n         End \n        </button>\n        ) : null}\n\n\n      \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}